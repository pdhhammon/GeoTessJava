package gov.sandia.geotess.apps;

import gov.sandia.geotess.GeoTessGrid;
import gov.sandia.geotess.GeoTessModel;
import gov.sandia.gmp.util.globals.GMTFormat;

public class LithoGrid {

	public LithoGrid() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {

		try 
		{
			
			GeoTessGrid grid0 = new GeoTessGrid("\\\\tonto2\\GNEM\\devlpool\\sballar\\GeoTessRoot\\GeoTess.2.2.2a.Java\\GeoTessModels\\geotess_grid_01000.geotess");
			grid0.writeGrid("\\\\tonto2\\GNEM\\devlpool\\sballar\\GMP_testing\\litho1.0\\onedegree_grid.ascii");
			
			GeoTessModel model = new GeoTessModel("\\\\tonto2\\GNEM\\devlpool\\sballar\\GMP_testing\\litho1.0\\litho10.geotess");
			//System.out.println(model);
			model.getGrid().writeGrid("\\\\tonto2\\GNEM\\devlpool\\sballar\\GMP_testing\\litho1.0\\litho10_geotess_grid.ascii");
			
			GeoTessGrid grid_one_tess = new GeoTessGrid("\\\\tonto2\\GNEM\\devlpool\\sballar\\GMP_testing\\litho1.0\\litho10_grid_one_tess.ascii");
			System.out.println(grid_one_tess);
			grid_one_tess.recomputeGridID();
			grid_one_tess.setInputGridSoftwareVersion("Custom 0.0.0");
			grid_one_tess.setInputGridGenerationDate(GMTFormat.getNow());
			grid_one_tess.testGrid();
			System.out.println(grid_one_tess);
			grid_one_tess.writeGrid("\\\\tonto2\\GNEM\\devlpool\\sballar\\GMP_testing\\litho1.0\\litho10_grid_one_tess.geotess");
			
			
//			GeoTessGrid:
//				gridID = DC9B7C437F5B3663E03F06319A6810A9
//				Input Grid  File : \\tonto2\GNEM\devlpool\sballar\GMP_testing\litho1.0\litho10_grid_one_tess.ascii
//				generated by Custom 0.0.0, 2015-05-13 13:43:55 -0600
//
//				nTessellations  =       1
//				nLevels         =       7
//				nVertices       =   40962
//				nTriangles      =  109220
//
//				    Tess    Level  LevelID EdgeLength  NVertices  NTriangles    First   Last+1
//				       0        0        0    64.0000         12          20        0       20
//				       0        1        1    32.0000         42          80       20      100
//				       0        2        2    16.0000        162         320      100      420
//				       0        3        3     8.0000        642        1280      420     1700
//				       0        4        4     4.0000       2562        5120     1700     6820
//				       0        5        5     2.0000      10242       20480     6820    27300
//				       0        6        6     1.0000      40962       81920    27300   109220


		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

	}

}
